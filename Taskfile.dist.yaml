version: '3'

env:
  #ENV: dev
  #ENV: testing
  #ENV: staging
  ENV: production

dotenv: ['.env', '{{ .taskEnv }}']

vars:
  project: Hello World
  homepage: https://example.com
  forums: https://example.com/forums
  chat: https://chat.example.com
  ircserver: irc.libera.chat
  ircroom: help
  homepage: https://example.com
  author: Acme Inc.
  version: 0.0.1
  build:
    sh: git rev-parse --short HEAD
  date:
    sh: date -Ins
  license: MIT
  user:
    sh: id -u -n
  hostname:
    sh: hostname
  taskEnv: .task.env

tasks:

  default:
    cmds:
      - task: hello

  hello:
    desc: "Display project welcome message"
    summary: |
      Display project information and welcome message

      This is space for a longer description.
    cmds:
      - cmd: echo " Hello {{ .fullname }}!"
        silent: true
      - cmd: echo -e "\nRun `just help` to get started."
        silent: true
      - cmd: just help
        silent: true

  build:
    desc: Build
    deps: ['build:templates']
    cmds:
      - echo Build...

  build:templates:
    desc: "Compile templates"
    sources:
      - '**/*.j2'
    cmds:
      - for: sources
        cmd: minijinja-cli --strict --format toml --output $(basename {{ .ITEM }} .j2) {{ .ITEM }} variables.toml

  test:
    desc: Run tests
    deps: ['test:code', 'test:scripts', 'test:apis']

  test:code:
    desc: Test code
    cmds:
      - task: run:pipelight:tests

  test:scripts:
    desc: Test using scripts
    cmds:
      - task: run:venom

  test:apis:
    desc: Test APIs
    cmds:
      - task: run:hurl

  run:pipelight:tests:
    desc: Run pipelight tests
    cmds:
      - pipelight run tests --attach
      - pipelight logs -vv

  run:venom:
    desc: Run venom scripted tests
    cmds:
      - if [ ! -f variables.yaml ]; then echo '---' > variables.yaml ; fi
      - venom run --output-dir results --html-report --var-from-file variables.yaml **/*.yaml
      - mv results/test_results.html results/index.html
      - cat results/test_results_venom.json | jq
      - echo www -p 4001 -r results

  run:hurl:
    desc: Run hurl API tests
    cmds:
      - hurl --test --parallel --glob *hurl.yaml --report-html results --report-json results
      - cat results/report.json | jq
      - echo www -p 4002 -r results

  clean:
    desc: Clean up
    cmds:
      - echo Cleaning...

  lint:
    desc: Lint code
    deps: ['run:lychee']

  run:lychee:
    desc: Run lychee link checker
    sources:
      - '**/*.md'
    cmds:
      - for: sources
        cmd: if ! test "$PWD" != "${PWD%node_modules*}" ; echo lychee {{ .ITEM }} ; fi

  format:
    desc: Format code
    deps: ['run:treefmt']

  run:treefmt:
    desc: Run treefmt
    cmds:
      - treefmt
    # for v2: treefmt --on-unmatched=info

  docs:
    desc: Build documentation pages
    deps: ['run:mdbook', 'run:rspress', run:zola', 'run:pagoda']

  run:mdbook:
    desc: Build mdbook technical notes
    generates:
      - './docs/technical/mdbook'
    cmds:
      - echo Building mdbook...
      - if [ ! -d mdbook ]; then mdbook init mdbook -title "Technical Documentation" --ignore git; fi
      - mdbook build mdbook --dest-dir build
      - 'echo Start server: mdbook serve --dest-dir build --port 3001'

  #run:docusourus:
    #desc: Build docusourus user guides
    #vars:
    #GIT_OWNER:
        #sh: git remote get-url origin | grep owner
    #GIT_PROJECT:
        #sh: git remote get-url origin | grep owner
    #generates:
      #- './docs/user-guides/docusourus'
    #cmds:
      #- echo Building docusourus...
      #- if [ ! -d docusourus ]; then npx --yes create-docusaurus@latest --typescript --git-strategy shallow --package-manager yarn docusourus classic ; fi
      #- cd docusourus
      #- 'sd --fixed-strings "facebook/docusourus" "{{.GIT_OWNER}}/{{.GIT_PROJECT}}" docusaurus.config.ts'
      #- 'sd "organizationName: .facebook." "{{.GIT_OWNER}}" docusaurus.config.ts'
      #- yarn build
      #- 'echo Start server: www -p 3002 -r build'

  run:rspress:
    desc: Build rspress user guides
    generates:
      - './docs/user-guides/rspress-site'
    cmds:
      - echo Building rspress-site...
      - if [ ! -d rspress-site ]; then bun create rspress@latest ; fi
      - cd rspress-site
      - cp ../rspress.config.ts .
      - bun install
      - bun run build
      - 'echo Start server: www -p 3003 -r build'

  run:zola:
    desc: Build zola blog and release notes
    generates:
      - './docs/blog/zola'
    cmds:
      - echo Building zola...
      - if [ ! -d zola ]; then zola init zola ; fi
      - cd zola
      - zola build --force --output-dir build
      - 'echo Start server: www -p 3004 -r build'

  run:pagoda:
    desc: Build pagoda site
    generates:
      - './docs/portal/pagoda'
    cmds:
      - echo Building pagoda...
      - if [ ! -d pagoda ]; then pagoda init pagoda ; fi
      - cd pagoda
      - PAGODA_HTTP_PORT=3005 pagoda serve

  audit:
    desc: Perform a security audit
    deps: ['audit:secrets', 'audit:vulnerabilities', 'audit:code-quality']

  audit:secrets:
    desc: Scan for secrets
    cmds:
      - task: run:trufflehog

  run:trufflehog:
    desc: Run trufflehog
    summary: |
      Scan for:

      - 700 credential detectors that support active verification against their respective APIs.
      - GitHub, GitLab, Docker, filesystems, S3, GCS, Circle CI and Travis CI.
      - Instantly verify private keys against millions of GitHub users and billions of TLS certificates
      - Scan binaries and documents

    cmds:
      - trufflehog git file://. --since-commit HEAD --only-verified --no-update --fail

  audit:vulnerabilities:
    desc: Scan for vulnerabilities
    cmds:
      - task: run:trivy

  run:trivy:
    desc: Run trivy
    summary: |
      Scan for:

      OS packages and software dependencies in use (SBOM)
      Known vulnerabilities (CVEs)
      IaC issues and misconfigurations
      Sensitive information and secrets
      Software licenses
    cmds:
      - trivy fs --scanners vuln,secret,misconfig --exit-code 183 .

  audit:code-quality:
    desc: Look for code smells
    cmds:
      - task: run:sonarcube

  run:sonarcube:
    desc: Run sonarcube
    cmds:
      - echo sonarcube run
